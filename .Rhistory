n2 = length(x2)
n3 = length(y2)
if (n1<3 & n2<3 & n3<3){
cat("Can't perform samples test since the vector is too small, please enter more value\n")
return(-1)
}
else if(n2 <=3 | n3<=3){
cat("Perform one sample t-test of before treatment and after treatment")
p.value = t.test(d,alternative)$p.value
cat("n1_paired match = ",n1,"\n")
cat("p.value=",p.value)
cat("\n")
}
else if(n1 <=3 ) {
cat("Perform two samples t-test of before treatment and after treatment\n\n")
p.value = t.test(x2,y2,alternative)$p.value
cat("n2_tumor sample = ",n2,"\n")
cat("n3_matched normal =",n3,"\n")
cat("p.value=",p.value)
cat("\n")
}
else if(missing(method)) {
cat("Perform weighted z-test\n")
weighted_z(x,y,alternative)
}
else if(method == "weighted_z") {
cat("Perform weighted z-test\n")
weighted_z(x,y,alternative)
}
else if(method == "mle_hetero"){
p = var.test(x,y)$p.value
if(p > 0.05){
cat("Your input is equal variance, we perform this test with wrong result \n")
mle_hetero(x,y,alternative)
}
else{
cat("Perform the MLE based test statistic under heteroscedasticity\n")
mle_hetero(x,y,alternative)
}
}
else if(method == "mle_homo"){
p = var.test(x,y)$p.value
if( p < 0.05){
cat("Your input x and y is unequal variance, we perform this test with wrong result\n")
mle_homo(x,y,alternative)
}
else{
cat("Perform the MLE based test statistic under homoscedasticity\n")
mle_homo(x,y,alternative)
}
}
else if(method == "modified_t"){
cat("Perform the modified t-statistic\n")
modified_t(x,y,alternative)
}
else if(method == "zcorr"){
cat("Perform corrected Z-test\n")
zcorr(x,y,alternative)
}
}
set.seed(123)
n=100
x=rnorm(n)
y=rnorm(n)
#x[1:5]=NA
#y[7:10]=NA
pmchen(x,y,method="weighted_z",alternative="two.sided")
pmchen(x,y,method="mle_hetero",alternative="two.sided")
pmchen(x,y,method="mle_homo",alternative="two.sided")
pmchen(x,y,method="zcorr",alternative="two.sided")
pmchen(x,y,method="modified_t",alternative="two.sided")
pmchen(x,y)
pmchen(x,y,method="modified_t",alternative="great")
set.seed(123)
n=3
x=rnorm(n)
y=rnorm(n)
#x[1:5]=NA
#y[7:10]=NA
pmchen(x,y,method="weighted_z",alternative="two.sided")
pmchen(x,y,method="mle_hetero",alternative="two.sided")
pmchen(x,y,method="mle_homo",alternative="two.sided")
pmchen(x,y,method="zcorr",alternative="two.sided")
pmchen(x,y,method="modified_t",alternative="two.sided")
pmchen(x,y)
pmchen(x,y,method="modified_t",alternative="great")
n=3
x=rnorm(n)
y=rnorm(n)
#x[1:5]=NA
#y[7:10]=NA
pmchen(x,y,method="weighted_z",alternative="two.sided")
n=30
x=rnorm(n)
y=rnorm(n)
#x[1:5]=NA
#y[7:10]=NA
pmchen(x,y,method="weighted_z",alternative="two.sided")
?t.test()
#' x[1:5]=NA
#' y[7:10]=NA
#' pmchen(x,y,method="weighted_z",alternative="two.sided")
#' pmchen(x,y,method="mle_hetero",alternative="two.sided")
#' pmchen(x,y,method="mle_homo",alternative="two.sided")
#' pmchen(x,y,method="zcorr",alternative="two.sided")
#' pmchen(x,y,method="modified_t",alternative="two.sided")
#' pmchen(x,y)
#' pmchen(x,y,method="modified_t",alternative="great")
#' @export
pmchen <- function(x,y,method=c("weighted_z","mle_hetero","mle_homo","modified_t","zcorr"),alternative="two.sided"){
data = data.frame(x,y)
xy1 = data[complete.cases(data),]  #one sample test with n1
xy2 = data[is.na(data$x)|is.na(data$y), ]
x2 = na.omit(xy2$x)
y2 = na.omit(xy2$y)
x1 = xy1$x
y1 = xy1$y
n1 = length(x1)
n2 = length(x2)
n3 = length(y2)
if (n1<3 & n2<3 & n3<3){
cat("Can't perform samples test since the vector is too small, please enter more value\n")
return(-1)
}
else if(n2 <=3 | n3<=3){
cat("Perform one sample t-test of before treatment and after treatment")
p.value = t.test(d,alternative,paired=True)$p.value
cat("n1_paired match = ",n1,"\n")
cat("p.value=",p.value)
cat("\n")
}
else if(n1 <=3 ) {
cat("Perform two samples t-test of before treatment and after treatment\n\n")
p.value = t.test(x2,y2,alternative)$p.value
cat("n2_tumor sample = ",n2,"\n")
cat("n3_matched normal =",n3,"\n")
cat("p.value=",p.value)
cat("\n")
}
else if(missing(method)) {
cat("Perform weighted z-test\n")
weighted_z(x,y,alternative)
}
else if(method == "weighted_z") {
cat("Perform weighted z-test\n")
weighted_z(x,y,alternative)
}
else if(method == "mle_hetero"){
p = var.test(x,y)$p.value
if(p > 0.05){
cat("Your input is equal variance, we perform this test with wrong result \n")
mle_hetero(x,y,alternative)
}
else{
cat("Perform the MLE based test statistic under heteroscedasticity\n")
mle_hetero(x,y,alternative)
}
}
else if(method == "mle_homo"){
p = var.test(x,y)$p.value
if( p < 0.05){
cat("Your input x and y is unequal variance, we perform this test with wrong result\n")
mle_homo(x,y,alternative)
}
else{
cat("Perform the MLE based test statistic under homoscedasticity\n")
mle_homo(x,y,alternative)
}
}
else if(method == "modified_t"){
cat("Perform the modified t-statistic\n")
modified_t(x,y,alternative)
}
else if(method == "zcorr"){
cat("Perform corrected Z-test\n")
zcorr(x,y,alternative)
}
}
set.seed(123)
n=3
x=rnorm(n)
y=rnorm(n)
#x[1:5]=NA
#y[7:10]=NA
pmchen(x,y,method="weighted_z",alternative="two.sided")
pmchen(x,y,method="mle_hetero",alternative="two.sided")
pmchen(x,y,method="mle_homo",alternative="two.sided")
pmchen(x,y,method="zcorr",alternative="two.sided")
pmchen(x,y,method="modified_t",alternative="two.sided")
pmchen(x,y)
pmchen(x,y,method="modified_t",alternative="great")
#' x[1:5]=NA
#' y[7:10]=NA
#' pmchen(x,y,method="weighted_z",alternative="two.sided")
#' pmchen(x,y,method="mle_hetero",alternative="two.sided")
#' pmchen(x,y,method="mle_homo",alternative="two.sided")
#' pmchen(x,y,method="zcorr",alternative="two.sided")
#' pmchen(x,y,method="modified_t",alternative="two.sided")
#' pmchen(x,y)
#' pmchen(x,y,method="modified_t",alternative="great")
#' @export
pmchen <- function(x,y,method=c("weighted_z","mle_hetero","mle_homo","modified_t","zcorr"),alternative="two.sided"){
data = data.frame(x,y)
xy1 = data[complete.cases(data),]  #one sample test with n1
xy2 = data[is.na(data$x)|is.na(data$y), ]
x2 = na.omit(xy2$x)
y2 = na.omit(xy2$y)
x1 = xy1$x
y1 = xy1$y
d = y1-x1
n1 = length(x1)
n2 = length(x2)
n3 = length(y2)
if (n1<3 & n2<3 & n3<3){
cat("Can't perform samples test since the vector is too small, please enter more value\n")
return(-1)
}
else if(n2 <=3 | n3<=3){
cat("Perform one sample t-test of before treatment and after treatment")
p.value = t.test(d,alternative,paired=True)$p.value
cat("n1_paired match = ",n1,"\n")
cat("p.value=",p.value)
cat("\n")
}
else if(n1 <=3 ) {
cat("Perform two samples t-test of before treatment and after treatment\n\n")
p.value = t.test(x2,y2,alternative)$p.value
cat("n2_tumor sample = ",n2,"\n")
cat("n3_matched normal =",n3,"\n")
cat("p.value=",p.value)
cat("\n")
}
else if(missing(method)) {
cat("Perform weighted z-test\n")
weighted_z(x,y,alternative)
}
else if(method == "weighted_z") {
cat("Perform weighted z-test\n")
weighted_z(x,y,alternative)
}
else if(method == "mle_hetero"){
p = var.test(x,y)$p.value
if(p > 0.05){
cat("Your input is equal variance, we perform this test with wrong result \n")
mle_hetero(x,y,alternative)
}
else{
cat("Perform the MLE based test statistic under heteroscedasticity\n")
mle_hetero(x,y,alternative)
}
}
else if(method == "mle_homo"){
p = var.test(x,y)$p.value
if( p < 0.05){
cat("Your input x and y is unequal variance, we perform this test with wrong result\n")
mle_homo(x,y,alternative)
}
else{
cat("Perform the MLE based test statistic under homoscedasticity\n")
mle_homo(x,y,alternative)
}
}
else if(method == "modified_t"){
cat("Perform the modified t-statistic\n")
modified_t(x,y,alternative)
}
else if(method == "zcorr"){
cat("Perform corrected Z-test\n")
zcorr(x,y,alternative)
}
}
x=rnorm(n)
y=rnorm(n)
d=x-y
t.test(d,paired=TRUE)$p.value
x=rnorm(n)
y=rnorm(n)
d=x-y
t.test(d)$p.value
#' x[1:5]=NA
#' y[7:10]=NA
#' pmchen(x,y,method="weighted_z",alternative="two.sided")
#' pmchen(x,y,method="mle_hetero",alternative="two.sided")
#' pmchen(x,y,method="mle_homo",alternative="two.sided")
#' pmchen(x,y,method="zcorr",alternative="two.sided")
#' pmchen(x,y,method="modified_t",alternative="two.sided")
#' pmchen(x,y)
#' pmchen(x,y,method="modified_t",alternative="great")
#' @export
pmchen <- function(x,y,method=c("weighted_z","mle_hetero","mle_homo","modified_t","zcorr"),alternative="two.sided"){
data = data.frame(x,y)
xy1 = data[complete.cases(data),]  #one sample test with n1
xy2 = data[is.na(data$x)|is.na(data$y), ]
x2 = na.omit(xy2$x)
y2 = na.omit(xy2$y)
x1 = xy1$x
y1 = xy1$y
d = y1-x1
n1 = length(x1)
n2 = length(x2)
n3 = length(y2)
if (n1<3 & n2<3 & n3<3){
cat("Can't perform samples test since the vector is too small, please enter more value\n")
return(-1)
}
else if(n2 <=3 | n3<=3){
cat("Perform one sample t-test of before treatment and after treatment")
p.value = t.test(d)$p.value
cat("n1_paired match = ",n1,"\n")
cat("p.value=",p.value)
cat("\n")
}
else if(n1 <=3 ) {
cat("Perform two samples t-test of before treatment and after treatment\n\n")
p.value = t.test(x2,y2,alternative)$p.value
cat("n2_tumor sample = ",n2,"\n")
cat("n3_matched normal =",n3,"\n")
cat("p.value=",p.value)
cat("\n")
}
else if(missing(method)) {
cat("Perform weighted z-test\n")
weighted_z(x,y,alternative)
}
else if(method == "weighted_z") {
cat("Perform weighted z-test\n")
weighted_z(x,y,alternative)
}
else if(method == "mle_hetero"){
p = var.test(x,y)$p.value
if(p > 0.05){
cat("Your input is equal variance, we perform this test with wrong result \n")
mle_hetero(x,y,alternative)
}
else{
cat("Perform the MLE based test statistic under heteroscedasticity\n")
mle_hetero(x,y,alternative)
}
}
else if(method == "mle_homo"){
p = var.test(x,y)$p.value
if( p < 0.05){
cat("Your input x and y is unequal variance, we perform this test with wrong result\n")
mle_homo(x,y,alternative)
}
else{
cat("Perform the MLE based test statistic under homoscedasticity\n")
mle_homo(x,y,alternative)
}
}
else if(method == "modified_t"){
cat("Perform the modified t-statistic\n")
modified_t(x,y,alternative)
}
else if(method == "zcorr"){
cat("Perform corrected Z-test\n")
zcorr(x,y,alternative)
}
}
n=3
x=rnorm(n)
y=rnorm(n)
#x[1:5]=NA
#y[7:10]=NA
pmchen(x,y,method="weighted_z",alternative="two.sided")
#' x[1:5]=NA
#' y[7:10]=NA
#' pmchen(x,y,method="weighted_z",alternative="two.sided")
#' pmchen(x,y,method="mle_hetero",alternative="two.sided")
#' pmchen(x,y,method="mle_homo",alternative="two.sided")
#' pmchen(x,y,method="zcorr",alternative="two.sided")
#' pmchen(x,y,method="modified_t",alternative="two.sided")
#' pmchen(x,y)
#' pmchen(x,y,method="modified_t",alternative="great")
#' @export
pmchen <- function(x,y,method=c("weighted_z","mle_hetero","mle_homo","modified_t","zcorr"),alternative="two.sided"){
data = data.frame(x,y)
xy1 = data[complete.cases(data),]  #one sample test with n1
xy2 = data[is.na(data$x)|is.na(data$y), ]
x2 = na.omit(xy2$x)
y2 = na.omit(xy2$y)
x1 = xy1$x
y1 = xy1$y
d = y1-x1
n1 = length(x1)
n2 = length(x2)
n3 = length(y2)
if (n1<3 & n2<3 & n3<3){
cat("Can't perform samples test since the vector is too small, please enter more value\n")
return(-1)
}
else if(n2 <=3 | n3<=3){
cat("Perform one sample t-test of before treatment and after treatment\n\n")
p.value = t.test(d)$p.value
cat("n1_paired match = ",n1,"\n")
cat("p.value=",p.value)
cat("\n")
}
else if(n1 <=3 ) {
cat("Perform two samples t-test of before treatment and after treatment\n\n")
p.value = t.test(x2,y2,alternative)$p.value
cat("n2_tumor sample = ",n2,"\n")
cat("n3_matched normal =",n3,"\n")
cat("p.value=",p.value)
cat("\n")
}
else if(missing(method)) {
cat("Perform weighted z-test\n")
weighted_z(x,y,alternative)
}
else if(method == "weighted_z") {
cat("Perform weighted z-test\n")
weighted_z(x,y,alternative)
}
else if(method == "mle_hetero"){
p = var.test(x,y)$p.value
if(p > 0.05){
cat("Your input is equal variance, we perform this test with wrong result \n")
mle_hetero(x,y,alternative)
}
else{
cat("Perform the MLE based test statistic under heteroscedasticity\n")
mle_hetero(x,y,alternative)
}
}
else if(method == "mle_homo"){
p = var.test(x,y)$p.value
if( p < 0.05){
cat("Your input x and y is unequal variance, we perform this test with wrong result\n")
mle_homo(x,y,alternative)
}
else{
cat("Perform the MLE based test statistic under homoscedasticity\n")
mle_homo(x,y,alternative)
}
}
else if(method == "modified_t"){
cat("Perform the modified t-statistic\n")
modified_t(x,y,alternative)
}
else if(method == "zcorr"){
cat("Perform corrected Z-test\n")
zcorr(x,y,alternative)
}
}
n=3
x=rnorm(n)
y=rnorm(n)
#x[1:5]=NA
#y[7:10]=NA
pmchen(x,y,method="weighted_z",alternative="two.sided")
set.seed(123)
n=300
x=rnorm(n)
y=rnorm(n)
#x[1:5]=NA
#y[7:10]=NA
pmchen(x,y,method="weighted_z",alternative="two.sided")
pmchen(x,y,method="mle_hetero",alternative="two.sided")
pmchen(x,y,method="mle_homo",alternative="two.sided")
pmchen(x,y,method="zcorr",alternative="two.sided")
pmchen(x,y,method="modified_t",alternative="two.sided")
pmchen(x,y)
pmchen(x,y,method="modified_t",alternative="great")
setwd("C:/Users/16318/Dropbox/My PC (DESKTOP-JRU3QOL)/Desktop/AMS_597_2021/PMChen")
setwd("C:/Users/16318/Dropbox/My PC (DESKTOP-JRU3QOL)/Desktop/AMS_597_2021")
getwd()
library(roxygen2)
roxygenise()
setwd("C:/Users/16318/Dropbox/My PC (DESKTOP-JRU3QOL)/Desktop/AMS_597_2021/PMChen")
getwd()
library(roxygen2)
roxygenise()
library(PMChen)
?pmchen
set.seed(123)
n=20
x=rnorm(n)
y=rnorm(n)
x[1:5]=NA
y[7:10]=NA
pmchen(x,y,method="weighted_z",alternative="two.sided")
pmchen(x,y,method="mle_hetero",alternative="two.sided")
pmchen(x,y,method="mle_homo",alternative="two.sided")
pmchen(x,y,method="zcorr",alternative="two.sided")
pmchen(x,y,method="modified_t",alternative="two.sided")
pmchen(x,y)
pmchen(x,y,method="modified_t",alternative="great")
set.seed(123)
n=20
x=rnorm(n)
y=rnorm(n)
pmchen(x,y,method="weighted_z",alternative="two.sided")
pmchen(x,y,method="mle_hetero",alternative="two.sided")
pmchen(x,y,method="mle_homo",alternative="two.sided")
pmchen(x,y,method="zcorr",alternative="two.sided")
pmchen(x,y,method="modified_t",alternative="two.sided")
pmchen(x,y)
pmchen(x,y,method="modified_t",alternative="great")
n=200
x=rnorm(n)
y=rnorm(n)
x[1:5]=NA
y[7:10]=NA
pmchen(x,y,method="weighted_z",alternative="two.sided")
pmchen(x,y,method="mle_hetero",alternative="two.sided")
pmchen(x,y,method="mle_homo",alternative="two.sided")
pmchen(x,y,method="zcorr",alternative="two.sided")
pmchen(x,y,method="modified_t",alternative="two.sided")
pmchen(x,y)
pmchen(x,y,method="modified_t",alternative="great")
q()
